<?php

/**
 * Implementation of hook_menu().
 */

function park_misc_menu() {
  
  $items = array();
  
  $items['test'] = array(
    'page callback' => 'park_misc_testPage',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
    
  return $items;
  
}


/**
 * Convert path from Drupal stream uri.
 */
function park_misc_testPage() {
  return 'test page';
}


/**
 * Convert json to array;
 */
function park_misc_jsonToArray($string) {

  $json = preg_replace('/.*\[(.*)\].*/i', '$1', $string);
  $json = ltrim(rtrim($json, '}'), '{');

  $json_encoded = urlencode($json);
  
  $json_encoded = str_replace('%26quot%3B', '%22', $json_encoded);
  
  $json = urldecode($json_encoded);
  
  $json = explode(',"', $json);
  //$json = explode(',', $json);
  
  $string = urlencode($json[0]);
  return urlencode('"') . ' ----- ' . $string . ' ----- ' . serialize($json);
  
  foreach ($json as $pair) {
    $pair = explode('":', $pair);
    $key = trim($pair[0], '"');
    $value = trim($pair[1], '"');
    $json_data[$key] = $value;
    //$json_data .= ',' . $key . ':' . $value;
  }
  
  //serialize();
  return $json_data;
}


/**
 * Convert path from Drupal stream uri.
 */
function park_misc_getPathFromStreamUri($uri) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', '/f');
  
  return $default_file_path . str_replace($file_default_scheme . ':/', '', $uri);
}


/**
 * Returns a current url.
 */
function park_misc_getCurrentUrl() {
    if (isset($_SERVER['REDIRECT_URL']) && $_SERVER['REDIRECT_URL']) {
      $url = $_SERVER['REDIRECT_URL'];
    }
    else {
      $url = explode('?', $_SERVER['REQUEST_URI']);
      $url = $url[0];
    }
    
    $url = "http://" . $_SERVER['SERVER_NAME'] . $url;
    return $url;
}


/**
 * Implements hook_theme().
 */
function park_misc_theme($existing, $type, $theme, $path) {
  return array(
    'park_misc_submenuSimple' => array(
      'variables' => array('vars' => null),
    ),
    'park_misc_headerLinks' => array(
      'variables' => array('vars' => null),
    ),
     
    // Altered Tagadelic weighted tag cloud.
    'park_misc_tagadelicWeighted_acceptPredefinedTermsPaths' => array(
      'variables' => array('terms' => array())
    ),

  );
}


/**
 * Theme function that renders the HTML for the tags.
 *
 * @ingroup themable
 */
function theme_park_misc_tagadelicWeighted_acceptPredefinedTermsPaths(array $vars) {
  $terms = $vars['terms'];
  $output = '';

  foreach ($terms as $term) {
    $output .= l($term->name, isset($term->link['href']) ? $term->link['href'] : 'taxonomy/term/' . $term->tid, array(
      'attributes' => array(
        'class' => array("tagadelic", "level" . $term->weight),
        'rel' => 'tag',
        'title'  => $term->description,
        )
      )
    ) . " \n";
  }
  
  
  if(isset($vars['voc'])){
    if (count($terms) >= variable_get('tagadelic_block_tags_' . $vars['voc']->vid, 12)) {
      $output .= theme('more_link', array('title' => t('more tags'), 'url' => "tagadelic/chunk/{$vars['voc']->vid}"));
    }
  }

  return $output;
}
  

/**
 * Simple theming of nested submenu.
 */
function theme_park_misc_headerLinks($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }

  $class = isset($vars['class']) ? $vars['class'] : 'header-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="' . $class . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    $out .= ($count ? $delimiter : '') . '<li>' . l(t($submenu['link']['link_title']), $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank' ))) . '</li>';
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


/**
 * Simple theming of nested submenu.
 */
function theme_park_misc_submenuSimple($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  $level = isset($vars['level']) ? $vars['level'] : 0;
  $class = isset($vars['class']) ? $vars['class'] : 'om-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="park ' . $class . ' lvl-' . $level . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (is_object($submenu)) {
      $submenu = (array) $submenu;
    }
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    $out .= ($count ? $delimiter : '') . '<li>';
    if($level) {
      for ($i = 0; $i < $level; $i++ ) {
        $out .= '--';
      }
    }
    $title = t($submenu['link']['link_title']);
    if(isset($submenu['count']) && $submenu['count']) {
      $title .= ' (' . $submenu['count'] . ')';
    }
    // If the field Description has '<nolink>' don't show link for this item
    if(isset($submenu['link']['localized_options']['attributes']['title']) && strtolower($submenu['link']['localized_options']['attributes']['title']) == '<nolink>') {
      $out .= $title;
    }
    else {
      $out .= l($title, $submenu['link']['href']);
    }
    $out .= '</li>';
    if (!empty($submenu['below'])) {
      // Recursion call.
      $out .= '<li>' . theme('park_misc_submenuSimple', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter )) . '</li>';
    }
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


